# Check the Chronos process.

# Monitor the service's PID file and memory use.
check process chronos with pidfile /var/run/chronos.pid

  # The start, stop and restart commands are linked to alarms
  start program = "/bin/bash -c '/usr/share/clearwater/bin/issue_alarm.py monit 3000.4; /etc/init.d/chronos start'"
  stop program  = "/bin/bash -c '/usr/share/clearwater/bin/issue_alarm.py monit 3000.4; /etc/init.d/chronos stop'"
  restart program = "/bin/bash -c '/usr/share/clearwater/bin/issue_alarm.py monit 3000.4; /etc/init.d/chronos restart'"

  # Check the service's resource usage, and abort the process if it's too high. This will
  # generate a core file and trigger diagnostics collection. Monit will raise an alarm when
  # it restarts the process
  if memory > 80% for 6 cycles then exec "/bin/bash -c '/usr/share/clearwater/bin/issue_alarm.py monit 3000.4; /etc/init.d/chronos abort'"

  # Clear any alarms if the process has been running for 30 seconds
  if uptime < 30 seconds
     then exec "/bin/true"
     else if succeeded then exec "/usr/share/clearwater/bin/issue_alarm.py monit 3000.1"

# Check the HTTP interface. This depends on the Chronos process (and so won't run
# unless the Chronos process is running)
check program poll_chronos with path "/usr/share/clearwater/bin/poll_chronos.sh"
  depends on chronos

  # Aborting generates a core file and triggers diagnostic collection. Monit will raise
  # an alarm when it restarts the process
  if status != 0 for 2 cycles then exec "/bin/bash -c '/usr/share/chronos/write_monit_restart_diags; /usr/share/clearwater/bin/issue_alarm.py monit 3000.4; /etc/init.d/chronos abort'"
